##############################################################################################################
from skimage.filters import threshold_otsu
txt1 = "684 686 685 933 931 683 932 682 681 664 679 682 662 667 669 672 677 679 681 666 676 660 664 670 668 670 668 679 666 672 676 675 678 678 677 660 675 674 673 933 931 657 670 672 672 671 674 674 673 673 676 932"
txt2 = "931 683 932 682 681 664 680 663 679 682 662 667 669 672 677 679 681 666 676 660 664 670 668 670 668 679 666 672 676 675 678 933 931 657 670 672 672 671 674 674 673 673 676 932 656 660 933"
txt3 = "686 685 933 687 683 932 684 670 684 680 663 679 682 662 667 669 672 677 934 672 676 675 679 681 935 666 678 681 678 677 660 675 674 673 933"
for txt in [txt1, txt2, txt3]:
    ts = txt.split()
    arr = np.array([int(i) for i in ts])
    print(f'----------------------{len(arr)}----------------------')
    # arr = np.random.randint(100, size=100)
    tic = time()
    threshold = threshold_otsu(arr)
    cluster1 = np.mean(arr[arr < threshold])
    cluster2 = np.mean(arr[arr > threshold])
    toc = time()
    print(f'{cluster1}, {cluster2}: {toc - tic}')
    tic = time()
    km = KMeans(n_clusters=2, random_state=0, max_iter=10, tol=1, n_init=1).fit(arr[:, None])
    toc = time()
    print(f'{np.squeeze(km.cluster_centers_)}: {toc - tic}')
    print('-----------------------')
##############################################################################################################